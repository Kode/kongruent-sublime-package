{   "name": "Kotlin",
    "scopeName": "source.Kongruent",
    "fileTypes": ["kong"],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "captures": {
                "1": {
                    "name": "keyword.other.kong"
                }, 
                "2": {
                    "name": "entity.name.package.kong"
                }
            }, 
            "match": "^\\s*(package)\\b(?:\\s*([^ ;$]+)\\s*)?"
        },
        {
            "include": "#imports"
        },
        {
            "include": "#statements"
        }
    ],
    "repository": {
        "statements": {
            "patterns": [
                {
                    "include": "#namespaces"
                },
                {
                    "include": "#typedefs"
                },
                {
                    "include": "#classes"
                },
                {
                    "include": "#functions"
                },
                {
                    "include": "#variables"
                },
                {
                    "include": "#getters-and-setters"
                },
                {
                    "include": "#expressions"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*", 
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.kong"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.kong"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "comment.line.double-slash.kong"
                        }, 
                        "2": {
                            "name": "punctuation.definition.comment.kong"
                        }
                    }, 
                    "match": "\\s*((//).*$\\n?)"
                }
            ]
        },
        "imports": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "keyword.other.kong"
                        },
                        "2": {
                            "name": "keyword.other.kong"
                        }
                },
                "match": "^\\s*(import)\\s+[^ $]+\\s+(as)?"
                }
            ]
        },
        "namespaces": {
            "patterns": [
                {
                    "match": "\\b(namespace)\\b",
                    "name": "keyword.other.kong"
                },
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#statements" 
                        }
                    ]
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "match": "\\b(Nothing|Any|Unit|String|CharSequence|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b", 
                    "name": "storage.type.buildin.kong"
                },
                {
                    "match": "\\b(IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b", 
                    "name": "storage.type.buildin.array.kong"
                },
                {
                    "begin": "\\b(Array|Collection|List|Map|Set|MutableList|MutableMap|MutableSet|Sequence)<\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.buildin.collection.kong"
                        }
                    },
                    "end": ">",
                    "patterns": [
                        { 
                            "include": "#types" 
                        },
                        {
                            "include": "#keywords" 
                        }
                    ]
                },
                {
                    "begin": "\\w+<",
                    "end": ">",
                    "patterns": [
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#keywords" 
                        }
                    ]
                },
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "patterns": [
                        { 
                            "include": "#statements"
                        }
                    ]
                },
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        { 
                            "include": "#types" 
                        }
                    ]
                },
                {
                    "match": "(->)",
                    "name": "keyword.operator.declaration.kong"
                }
            ]
        },
        "generics": {
            "patterns": [
                {
                    "begin": "(:)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.declaration.kong"
                        }
                    },
                    "end": "(?=,|>)",
                    "patterns": [
                        { 
                            "include": "#types" 
                        }
                    ]
                },
                { 
                    "include": "#keywords"
                },
                {
                    "match": "\\w+",
                    "name": "storage.type.generic.kong"
                }
            ]
        },
        "typedefs": {
            "begin": "(?=\\s*(?:type))",
            "end": "(?=$)",
            "patterns": [
                {
                    "match": "\\b(type)\\b",
                    "name": "keyword.other.kong"
                },
                {
                    "begin": "<",
                    "end": ">",
                    "patterns": [
                        { 
                            "include": "#generics" 
                        }
                    ]
                },
                {
                    "include": "#expressions"
                }
            ]
        },
        "classes": {
            "begin": "(?<!::)(?=\\b(?:companion|class|object|interface)\\b)",
            "end": "(?=$|\\})",
            "patterns": [
                {
                    "include" : "#comments"
                },
                {
                    "begin": "\\b(companion\\s*)?(class|object|interface)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.modifier.kong"
                        },
                        "2": {
                            "name": "storage.modifier.kong"
                        }
                    },
                    "end": "(?=<|\\{|\\(|:|$)",
                    "patterns": [
                        {
                            "include" : "#comments"
                        },
                        {
                            "match": "\\w+",
                            "name": "entity.name.type.class.kong"
                        }
                    ]
                },
                {
                    "begin": "<",
                    "end": ">",
                    "patterns": [
                        { 
                            "include": "#generics" 
                        }
                    ]
                },
                {
                    "begin": "\\(", 
                    "end": "\\)", 
                    "patterns": [
                        {
                            "include": "#parameters"
                        }
                    ]
                },
                {
                    "begin": "(:)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.declaration.kong"
                        }
                    },
                    "end": "(?={|$)",
                    "patterns": [
                        {
                            "match": "\\w+",
                            "name": "entity.other.inherited-class.kong"
                        },
                        {
                            "begin": "\\(",
                            "end": "\\)",
                            "patterns": [
                                {
                                    "include": "#expressions"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#statements"
                        }
                    ]
                }
            ]
        },
        "variables": {
            "begin": "(?=\\s*\\b(?:var|val)\\b)",
            "end": "(?=:|=|(\\b(by)\\b)|$)",
            "patterns": [
                {
                    "begin": "\\b(var|val)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.kong" 
                        }
                    },
                    "end": "(?=:|=|(\\b(by)\\b)|$)",
                    "patterns": [
                        {
                            "begin": "<",
                            "end": ">",
                            "patterns": [
                                {
                                    "include": "#generics"
                                }
                            ]
                        },
                        {
                            "captures": {
                                "2": { 
                                    "name": "entity.name.variable.kong"
                                }
                            },
                            "match": "([\\.<\\?>\\w]+\\.)?(\\w+)"
                        }
                    ]
                },
                {
                    "begin": "(:)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.declaration.kong"
                        }
                    },
                    "end": "(?==|$)",
                    "patterns": [
                        {
                            "include": "#types"
                        },
                        { 
                            "include": "#getters-and-setters" 
                        }
                    ]
                },
                {
                    "begin": "\\b(by)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.kong"
                        }
                    },
                    "end": "(?=$)",
                    "patterns": [
                        {
                            "include": "#expressions"
                        }
                    ]
                },
                {
                    "begin": "(=)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.assignment.kong"
                        }
                    },
                    "end": "(?=$)",
                    "patterns": [
                        {
                            "include": "#expressions"
                        },
                        {
                            "include": "#getters-and-setters"
                        }
                    ]
                }
            ]
        },
        "getters-and-setters": {
            "patterns": [
                {
                    "begin": "\\b(get)\\b\\s*\\(\\s*\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.kong"
                        }
                    },
                    "end": "\\}|(?=\\bset\\b)|$",
                    "patterns": [
                        {
                            "begin": "(=)",
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.kong"
                                }
                            },
                            "end": "(?=$|\\bset\\b)",
                            "patterns": [
                                {
                                    "include": "#expressions"
                                }
                            ]
                        },
                        {
                            "begin": "\\{",
                            "end": "\\}",
                            "patterns": [
                                { 
                                    "include": "#expressions" 
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "\\b(set)\\b\\s*(?=\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.kong"
                        }
                    },
                    "end": "\\}|(?=\\bget\\b)|$",
                    "patterns": [
                        {
                            "begin": "\\(",
                            "end": "\\)",
                            "patterns": [
                                {
                                    "include": "#parameters"
                                }
                             ] 
                        },
                        {
                            "begin": "(=)",
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.kong"
                                }
                            },
                            "end": "(?=$|\\bset\\b)",
                            "patterns": [
                                {
                                    "include": "#expressions"
                                }
                            ]
                        },
                        {
                            "begin": "\\{",
                            "end": "\\}",
                            "patterns": [
                                { 
                                    "include": "#expressions" 
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "functions": {
            "begin": "(?=\\s*\\b(?:fun)\\b)",
            "end": "(?=$|\\})",
            "patterns": [
                {
                    "begin": "\\b(fun)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.kong"
                        }
                    },
                    "end": "(?=\\()",
                    "patterns": [
                        {
                            "begin": "<",
                            "end": ">",
                            "patterns": [
                                {
                                    "include": "#generics"
                                }
                            ]
                        },
                        {
                            "captures": {
                                "2": { 
                                    "name": "entity.name.function.kong"
                                }
                            },
                            "match": "([\\.<\\?>\\w]+\\.)?(\\w+)"
                        }
                    ]
                },
                {
                    "begin": "\\(", 
                    "end": "\\)", 
                    "patterns": [
                        {
                            "include": "#parameters"
                        }
                    ]
                },
                {
                    "begin": "(:)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.declaration.kong"
                        }
                    },
                    "end": "(?={|=|$)", 
                    "patterns": [
                        {
                            "include": "#types"
                        }
                    ]
                },
                {
                    "begin": "\\{", 
                    "end": "(?=\\})", 
                    "patterns": [
                        {
                            "include": "#statements"
                        }
                    ]  
                },
                {
                    "begin": "(=)", 
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.assignment.kong"
                        }
                    },
                    "end": "(?=$)", 
                    "patterns": [
                        {
                            "include": "#expressions"
                        }
                    ]  
                }
            ]
        },
        "parameters": {
            "patterns": [
                {
                    "begin": "(:)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.declaration.kong"
                        }
                    },
                    "end": "(?=,|\\)|=)", 
                    "patterns": [
                        {
                            "include": "#types"
                        }
                    ]
                },
                {
                    "begin": "(=)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.declaration.kong"
                        }
                    },
                    "end": "(?=,|\\))",
                    "patterns": [
                        {
                            "include" : "#expressions"
                        }
                    ]
                },
                {
                    "include": "#keywords"
                },
                {
                    "match": "\\w+",
                    "name": "variable.parameter.function.kong"
                }
            ]
        },
        "expressions": {
            "patterns": [
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        { 
                            "include": "#expressions" 
                        }
                    ]
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#constants"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "begin": "\"\"\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.kong"
                        }
                    }, 
                    "end": "\"\"\"", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.kong"
                        }
                    }, 
                    "name": "string.quoted.third.kong", 
                    "patterns": [
                        {
                            "match": "(\\$\\w+|\\$\\{[^\\}]+\\})",
                            "name": "variable.parameter.template.kong"
                        },
                        {
                            "match": "\\\\.", 
                            "name": "constant.character.escape.kong"
                        }
                    ]
                },
                {
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.kong"
                        }
                    }, 
                    "end": "\"", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.kong"
                        }
                    }, 
                    "name": "string.quoted.double.kong", 
                    "patterns": [
                        {
                            "match": "(\\$\\w+|\\$\\{[^\\}]+\\})",
                            "name": "variable.parameter.template.kong"
                        },
                        {
                            "match": "\\\\.", 
                            "name": "constant.character.escape.kong"
                        }
                    ]
                }, 
                {
                    "begin": "'", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.kong"
                        }
                    }, 
                    "end": "'", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.kong"
                        }
                    }, 
                    "name": "string.quoted.single.kong", 
                    "patterns": [
                        {
                            "match": "\\\\.", 
                            "name": "constant.character.escape.kong"
                        }
                    ]
                },
                {
                    "begin": "`", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.kong"
                        }
                    }, 
                    "end": "`", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.kong"
                        }
                    }, 
                    "name": "string.quoted.single.kong"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "match": "\\b(true|false|null|this|super)\\b", 
                    "name": "constant.language.kong"
                }, 
                {
                    "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFf])?\\b", 
                    "name": "constant.numeric.kong"
                },
                {
                    "match": "\\b([A-Z][A-Z0-9_]+)\\b",
                    "name": "constant.other.kong"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "\\b(var|val|public|private|protected|abstract|final|sealed|enum|open|attribute|annotation|override|inline|vararg|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof|reified|suspend)\\b",
                    "name": "storage.modifier.kong"
                },
                {
                    "match": "\\b(try|catch|finally|throw)\\b", 
                    "name": "keyword.control.catch-exception.kong"
                },
                {
                    "match": "\\b(if|else|while|for|do|return|when|where|break|continue)\\b", 
                    "name": "keyword.control.kong"
                },
                {
                    "match": "\\b(in|is|!in|!is|as|as\\?|assert)\\b", 
                    "name": "keyword.operator.kong"
                },
                {
                    "match": "(==|!=|===|!==|<=|>=|<|>)", 
                    "name": "keyword.operator.comparison.kong"
                }, 
                {
                    "match": "(=)", 
                    "name": "keyword.operator.assignment.kong"
                },
                {
                    "match": "(::)", 
                    "name": "keyword.operator.kong"
                },
                {
                    "match": "(:)", 
                    "name": "keyword.operator.declaration.kong"
                },
                {
                    "match": "\\b(by)\\b", 
                    "name": "keyword.other.by.kong"
                },
                {
                    "match": "(\\?\\.)", 
                    "name": "keyword.operator.safenav.kong"
                }, 
                {
                    "match": "(\\.)", 
                    "name": "keyword.operator.dot.kong"
                }, 
                {
                    "match": "(\\?:)", 
                    "name": "keyword.operator.elvis.kong"
                }, 
                {
                    "match": "(\\-\\-|\\+\\+)", 
                    "name": "keyword.operator.increment-decrement.kong"
                }, 
                {
                    "match": "(\\+=|\\-=|\\*=|\\/=)",
                    "name": "keyword.operator.arithmetic.assign.kong"
                },
                {
                    "match": "(\\.\\.)",
                    "name": "keyword.operator.range.kong"
                },
                {
                    "match": "(\\-|\\+|\\*|\\/|%)", 
                    "name": "keyword.operator.arithmetic.kong"
                }, 
                {
                    "match": "(!|&&|\\|\\|)", 
                    "name": "keyword.operator.logical.kong"
                },
                {
                    "match": "(;)", 
                    "name": "punctuation.terminator.kong"
                }
            ]
        }
    },
    "uuid": "d508c059-a938-4779-b2bc-ff43a5078907"
}
